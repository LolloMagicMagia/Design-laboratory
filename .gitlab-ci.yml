variables:
  # Docker vars
  DOCKER_DRIVER: "overlay2"
  DOCKER_TLS_CERTDIR: ""
  # Project dirs
  FRONTEND_DIR: "./frontend"
  BACKEND_DIR: "./bicoChat_backend"

stages:
  - validate
  - static-analysis
  - build
  - test
  - deploy

# Job per validare il frontend
validate-frontend:
  stage: validate
  image: node:20
  script:
    - cd $FRONTEND_DIR
    - echo "Checking Node.js and npm versions"
    - node --version
    - npm --version
    - echo "Installing dependencies"
    - npm ci
    - echo "Checking package.json"
    - npm ls --depth=0
  cache:
    key: ${CI_COMMIT_REF_SLUG}-frontend
    paths:
      - $FRONTEND_DIR/node_modules/
  allow_failure: true

# Job per validare il backend
validate-backend:
  stage: validate
  image: maven:3-eclipse-temurin-21
  script:
    - cd $BACKEND_DIR
    - echo "Checking Java and Maven versions"
    - java -version
    - mvn --version
    - echo "Validating project structure"
    - mvn validate
  cache:
    key: ${CI_COMMIT_REF_SLUG}-backend
    paths:
      - $BACKEND_DIR/.m2/
  allow_failure: true

static-backend:
  stage: static-analysis
  image: maven:3-eclipse-temurin-21
  script:
    - cd $BACKEND_DIR
    - echo "Eseguo Checkstyle..."
    - mvn checkstyle:check
    - echo "Eseguo PMD..."
    - mvn pmd:check
    - echo "Eseguo SpotBugs..."
    - mvn spotbugs:check
  cache:
    key: ${CI_COMMIT_REF_SLUG}-backend
    paths:
      - $BACKEND_DIR/.m2/
  allow_failure: false
  needs:
    - validate-backend

# Job per costruire il frontend Next.js
build-frontend:
  stage: build
  image: node:20
  script:
    - cd $FRONTEND_DIR
    - npm ci
    - echo "Building frontend application..."
    - npm run build -- --no-lint
    - echo "Frontend build completed successfully!"
  artifacts:
    paths:
      - $FRONTEND_DIR/.next/
    expire_in: 1 day
  cache:
    key: ${CI_COMMIT_REF_SLUG}-frontend
    paths:
      - $FRONTEND_DIR/node_modules/
  needs:
    - validate-frontend

# Job per costruire il backend Spring Boot
build-backend:
  stage: build
  image: maven:3-eclipse-temurin-21
  script:
    - cd $BACKEND_DIR
    - mvn package -B -DskipTests
    - echo "Backend build completed successfully!"
    - ls -la target/*.jar
    - echo "JAR_FILE=$(find \"$BACKEND_DIR/target\" -name '*.jar' | head -1)" > build.env

  artifacts:
    paths:
      - $BACKEND_DIR/target/*.jar
    expire_in: 1 day
  cache:
    key: ${CI_COMMIT_REF_SLUG}-backend
    paths:
      - $BACKEND_DIR/.m2/
  needs:
    - validate-backend

# Job per testare il frontend
test-frontend:
  stage: test
  image: node:20
  script:
    - cd $FRONTEND_DIR
    - npm ci
    - npm run lint
    - npm run test_selenium
  dependencies:
    - build-frontend
  cache:
    key: ${CI_COMMIT_REF_SLUG}-frontend
    paths:
      - $FRONTEND_DIR/node_modules/

# Job per testare il backend
test-backend:
  stage: test
  image: maven:3-eclipse-temurin-21
  script:
    - cd $BACKEND_DIR
    - mvn test
  dependencies:
    - build-backend
  cache:
    key: ${CI_COMMIT_REF_SLUG}-backend
    paths:
      - $BACKEND_DIR/.m2/


# Selenium E2E tests
selenium-e2e:
  stage: test
  image: docker/compose:latest
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_TLS_CERTDIR: ""
    SELENIUM_IMAGE: selenium/standalone-chrome:latest
  needs:
    - build-frontend
    - build-backend
  script:
    - docker-compose up -d --build
    - |
      for i in $(seq 1 30); do
        if curl -s http://localhost:3000; then break; fi
        sleep 2
      done
    - cd $FRONTEND_DIR
    - npm ci
    - npm run test_selenium
    - docker-compose down
  cache:
    key: ${CI_COMMIT_REF_SLUG}-frontend
    paths:
      - $FRONTEND_DIR/node_modules/

# Job per deploy del frontend (placeholder)
deploy-frontend:
  stage: deploy
  image: node:20
  script:
    - cd $FRONTEND_DIR
    - echo "Frontend build successfully completed"
    - echo "Deployment step will be configured in the future"
  dependencies:
    - build-frontend
  environment:
    name: staging
  only:
    - develop
  when: manual

# Job per deploy del backend (placeholder)
deploy-backend:
  stage: deploy
  image: maven:3-eclipse-temurin-21
  script:
    - cd $BACKEND_DIR
    - echo "Backend build successfully completed"
    - echo "Deployment step will be configured in the future"
  dependencies:
    - build-backend
  environment:
    name: staging
  only:
    - develop
  when: manual