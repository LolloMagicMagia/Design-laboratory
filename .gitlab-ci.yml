stages:
  - validate
  - build
  - test
  - deploy

variables:
  # Variabili per Docker
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

  # Variabili per il progetto
  FRONTEND_DIR: "./frontend"
  BACKEND_DIR: "./bicoChat_backend"

# Job per validare il frontend
validate-frontend:
  stage: validate
  image: node:20
  script:
    - cd $FRONTEND_DIR
    - echo "Checking Node.js and npm versions"
    - node --version
    - npm --version
    - echo "Installing dependencies"
    - npm ci
    - echo "Checking package.json"
    - npm ls --depth=0
  cache:
    key: ${CI_COMMIT_REF_SLUG}-frontend
    paths:
      - $FRONTEND_DIR/node_modules/
  allow_failure: true

# Job per validare il backend
validate-backend:
  stage: validate
  image: maven:3-eclipse-temurin-21
  script:
    - cd $BACKEND_DIR
    - echo "Checking Java and Maven versions"
    - java -version
    - mvn --version
    - echo "Validating project structure"
    - mvn validate
  cache:
    key: ${CI_COMMIT_REF_SLUG}-backend
    paths:
      - $BACKEND_DIR/.m2/
  allow_failure: true

# Job per costruire il frontend Next.js
build-frontend:
  stage: build
  image: node:20
  script:
    - cd $FRONTEND_DIR
    - echo "Installing dependencies..."
    - npm ci
    - echo "Building frontend application..."
    - npm run build -- --no-lint
    - echo "Frontend build completed successfully!"
  artifacts:
    paths:
      - $FRONTEND_DIR/.next/
    expire_in: 1 day  # Aumentato il tempo di scadenza
  cache:
    key: ${CI_COMMIT_REF_SLUG}-frontend
    paths:
      - $FRONTEND_DIR/node_modules/
  needs:
    - validate-frontend  # Esplicita dipendenza
  rules:
    - if: $CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "master" || $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - when: manual  # Esecuzione manuale per altri branch

# Job per costruire il backend Spring Boot
build-backend:
  stage: build
  image: maven:3-eclipse-temurin-21
  script:
    - cd $BACKEND_DIR
    - echo "Building backend application..."
    - mvn package -B -DskipTests
    - echo "Backend build completed successfully! JAR location: target/"
    - ls -la target/*.jar
  artifacts:
    paths:
      - $BACKEND_DIR/target/*.jar
    expire_in: 1 day  # Aumentato il tempo di scadenza
    reports:
      dotenv: build.env  # Per passare variabili di ambiente tra job
  cache:
    key: ${CI_COMMIT_REF_SLUG}-backend
    paths:
      - $BACKEND_DIR/.m2/
  needs:
    - validate-backend  # Esplicita dipendenza
  rules:
    - if: $CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "master" || $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - when: manual  # Esecuzione manuale per altri branch
  after_script:
    - echo "JAR_FILE=$(find $BACKEND_DIR/target -name '*.jar' | head -1)" > build.env

# Job per testare il frontend
test-frontend:
  stage: test
  image: node:20
  script:
    - cd $FRONTEND_DIR
    - npm ci
    - npm run lint
    - npm run test_selenium
  dependencies:
    - build-frontend
  cache:
    key: ${CI_COMMIT_REF_SLUG}-frontend
    paths:
      - $FRONTEND_DIR/node_modules/

# Job per testare il backend
test-backend:
  stage: test
  image: maven:3-eclipse-temurin-21
  script:
    - cd $BACKEND_DIR
    - mvn test
  dependencies:
    - build-backend
  cache:
    key: ${CI_COMMIT_REF_SLUG}-backend
    paths:
      - $BACKEND_DIR/.m2/

# Job per deploy del frontend (placeholder)
deploy-frontend:
  stage: deploy
  image: node:20
  script:
    - cd $FRONTEND_DIR
    - echo "Frontend build successfully completed"
    - echo "Deployment step will be configured in the future"
  dependencies:
    - build-frontend
  environment:
    name: staging
  only:
    - develop
  when: manual

# Job per deploy del backend (placeholder)
deploy-backend:
  stage: deploy
  image: maven:3-eclipse-temurin-21
  script:
    - cd $BACKEND_DIR
    - echo "Backend build successfully completed"
    - echo "Deployment step will be configured in the future"
  dependencies:
    - build-backend
  environment:
    name: staging
  only:
    - develop
  when: manual